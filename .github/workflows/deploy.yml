name: Deploy to prod

on:
  release:
    types: [published]

jobs:
  deploy:

    name: Build site & deploy to AWS

    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Checkout file
        uses: actions/checkout@v2

      - name: Get tagged version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.15'

      - name: Set up caching for npm
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node packages
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: npm ci --production

      - name: Build assets
        run: npm run deploy

      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Install Bundler
        run: |
          gem install bundler
          bundle config path vendor/bundle

      - name: Set up caching for Bundler
        id: cache-gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: Bundle install
        if: steps.cache-gems.outputs.cache-hit != 'true'
        run: bundle install --jobs 4 --retry 3

      - name: Add version & build timestamp
        run: |
          echo `date` > _data/timestamp.yml
          echo "${{ steps.vars.outputs.tag }}" > _data/version.yml

      - name: Jekyll build
        env:
          JEKYLL_ENV: production
        run: bundle exec jekyll build --config "_config.yml,_config.prod.yml"

      - name: Lint CSS
        run: npm run lint:css

      - name: Lint JavaScript
        run: npm run lint:js

      - name: Deploy to AWS
        run: |
          aws s3 sync ./_site/ s3://${{ secrets.S3_BUCKET }} \
            --include "*" \
            --acl "public-read" \
            --delete \
            --exact-timestamps

      - name: Set cache-control
        run: |
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/ s3://${{ secrets.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.woff" \
            --include "*.jpg" \
            --include "*.jpeg" \
            --include "*.png" \
            --include "*.gif" \
            --include "*.ico" \
            --include "*.js" \
            --include "*.css" \
            --recursive \
            --metadata-directive REPLACE \
            --expires "`date --date='10 years'`" \
            --acl public-read \
            --cache-control max-age=31536000,public
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/ s3://${{ secrets.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.json" \
            --include "*.html" \
            --include "*.xml" \
            --recursive \
            --metadata-directive REPLACE \
            --expires "`date --date='2 days ago'`" \
            --acl public-read \
            --cache-control no-cache

      - name: Set correct MIME types
        run: |
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/ s3://${{ secrets.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.html" \
            --content-type "text/html"
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/ s3://${{ secrets.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.css" \
            --content-type "text/css"
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/ s3://${{ secrets.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.js" \
            --content-type "text/js"
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/ s3://${{ secrets.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.json" \
            --content-type "application/json"
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/ s3://${{ secrets.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.xml" \
            --content-type "application/xml"

      - name: Create CloudFront invalidation
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*.html" "/*.json" "/*.xml"
