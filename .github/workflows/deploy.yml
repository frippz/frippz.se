name: Deploy to prod

on:
  release:
    types: [published]

jobs:
  deploy:

    name: Deploy to prod

    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Checkout file
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.15'

      - name: Set up caching for npm
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node packages
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: npm ci --production

      - name: Build assets
        run: npm run deploy

      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Install Bundler
        run: |
          gem install bundler
          bundle config path vendor/bundle

      - name: Set up caching for Bundler
        id: cache-gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: Bundle install
        if: steps.cache-gems.outputs.cache-hit != 'true'
        run: bundle install --jobs 4 --retry 3

      - name: Jekyll build
        env:
          JEKYLL_ENV: production
        run: bundle exec jekyll build --config "_config.yml,_config.prod.yml"

      - name: Lint CSS
        run: npm run lint:css

      - name: Lint JavaScript
        run: npm run lint:js

      - name: Get tagged version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          DEPLOY_DIR: "./_site"
          DEPLOY_MSG: ${{ steps.vars.outputs.tag }}
        run: |
          wget -qO- 'https://cli.netlify.com/download/latest/linux' | tar xz
          ./netlifyctl deploy -A $NETLIFY_AUTH_TOKEN -s $NETLIFY_SITE_ID -P $DEPLOY_DIR -m "$DEPLOY_MSG"

      - if: failure()
        name: Dump netlifyctl-debug.log
        uses: actions/upload-artifact@master
        with:
          name: netlifyctl-debug
          path: ./netlifyctl-debug.log

      - name: Deploy to AWS
        uses: reggionick/s3-deploy@v3.0.0
        with:
          folder: _site
          bucket: ${{ secrets.S3_BUCKET }}
          bucket-region: ${{ secrets.S3_BUCKET_REGION }}
          dist-id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          invalidation: /
          delete-removed: true
