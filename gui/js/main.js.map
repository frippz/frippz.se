{"version":3,"sources":["prism.js","main.js"],"names":["document","createElement","window","querySelector","classList","add","self","WorkerGlobalScope","Prism","lang","_","util","encode","tokens","Token","type","content","alias","map","replace","o","Object","prototype","toString","call","match","clone","key","hasOwnProperty","slice","languages","extend","id","redef","insertBefore","inside","before","insert","root","grammar","arguments","length","newToken","ret","token","DFS","value","this","callback","i","highlightAll","async","element","elements","querySelectorAll","highlightElement","language","parent","test","className","parentNode","nodeName","code","textContent","env","hooks","run","Worker","worker","filename","onmessage","evt","highlightedCode","stringify","JSON","parse","data","innerHTML","postMessage","highlight","text","tokenize","strarr","rest","tokenloop","patterns","j","pattern","lookbehind","lookbehindLength","str","lastIndex","exec","from","index","len","to","after","args","push","wrapped","Array","splice","apply","all","name","callbacks","join","tag","classes","attributes","aliases","addEventListener","message","close","script","getElementsByTagName","src","hasAttribute","module","exports","markup","comment","prolog","doctype","cdata","punctuation","namespace","attr-value","attr-name","entity","css","atrule","url","selector","property","string","important","function","style","style-attr","pseudo-element","pseudo-class","class","hexcode","number","clike","class-name","keyword","boolean","operator","ignore","javascript","regex","bash","git","command","parameter","coord","deleted","inserted","commit_sha1"],"mappings":"AAAA,GCOA,iBAAAA,WAAA,aAAAA,UAAAC,cAAA,MAAA,oBAAAC,SAGAF,SAAAG,cAAA,QAAAC,UAAAC,IAAA,MDVA,iBAAAL,WAAA,aAAAA,UAAAC,cAAA,MAAA,oBAAAC,QAAA,CAGAI,KAAA,mBAAAJ,QACAA,OAEA,mBAAAK,oBAAAD,eAAAC,mBACAD,OAUA,IAAAE,OAAA,WAGA,GAAAC,GAAA,iCAEAC,EAAAJ,KAAAE,OACAG,MACAC,OAAA,SAAAC,GACA,MAAAA,aAAAC,GACA,GAAAA,GAAAD,EAAAE,KAAAL,EAAAC,KAAAC,OAAAC,EAAAG,SAAAH,EAAAI,OACA,UAAAP,EAAAC,KAAAI,KAAAF,GACAA,EAAAK,IAAAR,EAAAC,KAAAC,QAEAC,EAAAM,QAAA,KAAA,SAAAA,QAAA,KAAA,QAAAA,QAAA,UAAA,MAIAJ,KAAA,SAAAK,GACA,MAAAC,QAAAC,UAAAC,SAAAC,KAAAJ,GAAAK,MAAA,oBAAA,IAIAC,MAAA,SAAAN,GACA,GAAAL,GAAAL,EAAAC,KAAAI,KAAAK,EAEA,QAAAL,GACA,IAAA,SACA,GAAAW,KAEA,KAAA,GAAAC,KAAAP,GACAA,EAAAQ,eAAAD,KACAD,EAAAC,GAAAjB,EAAAC,KAAAe,MAAAN,EAAAO,IAIA,OAAAD,EAEA,KAAA,QACA,MAAAN,GAAAS,QAGA,MAAAT,KAIAU,WACAC,OAAA,SAAAC,EAAAC,GACA,GAAAxB,GAAAC,EAAAC,KAAAe,MAAAhB,EAAAoB,UAAAE,GAEA,KAAA,GAAAL,KAAAM,GACAxB,EAAAkB,GAAAM,EAAAN,EAGA,OAAAlB,IAYAyB,aAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,GAAA5B,EAAAoB,SACA,IAAAS,GAAAD,EAAAH,EAEA,IAAA,GAAAK,UAAAC,OAAA,CACAJ,EAAAG,UAAA,EAEA,KAAA,GAAAE,KAAAL,GACAA,EAAAT,eAAAc,KACAH,EAAAG,GAAAL,EAAAK,GAIA,OAAAH,GAGA,GAAAI,KAEA,KAAA,GAAAC,KAAAL,GAEA,GAAAA,EAAAX,eAAAgB,GAAA,CAEA,GAAAA,GAAAR,EAEA,IAAA,GAAAM,KAAAL,GAEAA,EAAAT,eAAAc,KACAC,EAAAD,GAAAL,EAAAK,GAKAC,GAAAC,GAAAL,EAAAK,GAWA,MANAlC,GAAAoB,UAAAe,IAAAnC,EAAAoB,UAAA,SAAAH,EAAAmB,GACAA,IAAAR,EAAAH,IAAAR,GAAAQ,IACAY,KAAApB,GAAAgB,KAIAL,EAAAH,GAAAQ,GAIAE,IAAA,SAAAzB,EAAA4B,EAAAjC,GACA,IAAA,GAAAkC,KAAA7B,GACAA,EAAAQ,eAAAqB,KACAD,EAAAxB,KAAAJ,EAAA6B,EAAA7B,EAAA6B,GAAAlC,GAAAkC,GAEA,WAAAvC,EAAAC,KAAAI,KAAAK,EAAA6B,IACAvC,EAAAoB,UAAAe,IAAAzB,EAAA6B,GAAAD,GAEA,UAAAtC,EAAAC,KAAAI,KAAAK,EAAA6B,KACAvC,EAAAoB,UAAAe,IAAAzB,EAAA6B,GAAAD,EAAAC,MAOAC,aAAA,SAAAC,EAAAH,GAGA,IAAA,GAAAI,GAFAC,EAAArD,SAAAsD,iBAAA,oGAEAL,EAAA,EAAAG,EAAAC,EAAAJ,MACAvC,EAAA6C,iBAAAH,EAAAD,KAAA,EAAAH,IAIAO,iBAAA,SAAAH,EAAAD,EAAAH,GAIA,IAFA,GAAAQ,GAAAjB,EAAAkB,EAAAL,EAEAK,IAAAhD,EAAAiD,KAAAD,EAAAE,YACAF,EAAAA,EAAAG,UAQA,IALAH,IACAD,GAAAC,EAAAE,UAAAlC,MAAAhB,KAAA,CAAA,KAAA,GACA8B,EAAA7B,EAAAoB,UAAA0B,IAGAjB,EAAA,CAKAa,EAAAO,UAAAP,EAAAO,UAAAxC,QAAAV,EAAA,IAAAU,QAAA,OAAA,KAAA,aAAAqC,EAGAC,EAAAL,EAAAQ,WAEA,OAAAF,KAAAD,EAAAI,YACAJ,EAAAE,UAAAF,EAAAE,UAAAxC,QAAAV,EAAA,IAAAU,QAAA,OAAA,KAAA,aAAAqC,EAGA,IAAAM,GAAAV,EAAAW,WAEA,IAAAD,EAAA,CAIA,GAAAE,IACAZ,QAAAA,EACAI,SAAAA,EACAjB,QAAAA,EACAuB,KAAAA,EAKA,IAFApD,EAAAuD,MAAAC,IAAA,mBAAAF,GAEAb,GAAA7C,KAAA6D,OAAA,CACA,GAAAC,GAAA,GAAAD,QAAAzD,EAAA2D,SAEAD,GAAAE,UAAA,SAAAC,GACAP,EAAAQ,gBAAA1D,EAAA2D,UAAAC,KAAAC,MAAAJ,EAAAK,MAAApB,GAEA9C,EAAAuD,MAAAC,IAAA,gBAAAF,GAEAA,EAAAZ,QAAAyB,UAAAb,EAAAQ,gBAEAxB,GAAAA,EAAAxB,KAAAwC,EAAAZ,SACA1C,EAAAuD,MAAAC,IAAA,kBAAAF,IAGAI,EAAAU,YAAAJ,KAAAD,WACAjB,SAAAQ,EAAAR,SACAM,KAAAE,EAAAF,YAIAE,GAAAQ,gBAAA9D,EAAAqE,UAAAf,EAAAF,KAAAE,EAAAzB,QAAAyB,EAAAR,UAEA9C,EAAAuD,MAAAC,IAAA,gBAAAF,GAEAA,EAAAZ,QAAAyB,UAAAb,EAAAQ,gBAEAxB,GAAAA,EAAAxB,KAAA4B,GAEA1C,EAAAuD,MAAAC,IAAA,kBAAAF,MAIAe,UAAA,SAAAC,EAAAzC,EAAAiB,GACA,GAAA3C,GAAAH,EAAAuE,SAAAD,EAAAzC,EACA,OAAAzB,GAAA2D,UAAA/D,EAAAC,KAAAC,OAAAC,GAAA2C,IAGAyB,SAAA,SAAAD,EAAAzC,EAAAiB,GACA,GAAA1C,GAAAJ,EAAAI,MAEAoE,GAAAF,GAEAG,EAAA5C,EAAA4C,IAEA,IAAAA,EAAA,CACA,IAAA,GAAAvC,KAAAuC,GACA5C,EAAAK,GAAAuC,EAAAvC,SAGAL,GAAA4C,KAGAC,EAAA,IAAA,GAAAxC,KAAAL,GACA,GAAAA,EAAAX,eAAAgB,IAAAL,EAAAK,GAAA,CAIA,GAAAyC,GAAA9C,EAAAK,EACAyC,GAAA,UAAA3E,EAAAC,KAAAI,KAAAsE,GAAAA,GAAAA,EAEA,KAAA,GAAAC,GAAA,EAAAA,EAAAD,EAAA5C,SAAA6C,EAAA,CACA,GAAAC,GAAAF,EAAAC,GACAnD,EAAAoD,EAAApD,OACAqD,IAAAD,EAAAC,WACAC,EAAA,EACAxE,EAAAsE,EAAAtE,KAEAsE,GAAAA,EAAAA,SAAAA,CAEA,KAAA,GAAAtC,GAAA,EAAAA,EAAAiC,EAAAzC,OAAAQ,IAAA,CAEA,GAAAyC,GAAAR,EAAAjC,EAEA,IAAAiC,EAAAzC,OAAAuC,EAAAvC,OAEA,KAAA2C,EAGA,MAAAM,YAAA5E,IAAA,CAIAyE,EAAAI,UAAA,CAEA,IAAAlE,GAAA8D,EAAAK,KAAAF,EAEA,IAAAjE,EAAA,CACA+D,IACAC,EAAAhE,EAAA,GAAAgB,OAGA,IAAAoD,GAAApE,EAAAqE,MAAA,EAAAL,EACAhE,EAAAA,EAAA,GAAAI,MAAA4D,GACAM,EAAAtE,EAAAgB,OACAuD,EAAAH,EAAAE,EACA3D,EAAAsD,EAAA7D,MAAA,EAAAgE,EAAA,GACAI,EAAAP,EAAA7D,MAAAmE,EAAA,GAEAE,GAAAjD,EAAA,EAEAb,IACA8D,EAAAC,KAAA/D,EAGA,IAAAgE,GAAA,GAAAtF,GAAA8B,EAAAT,EAAAzB,EAAAuE,SAAAxD,EAAAU,GAAAV,EAAAR,EAEAiF,GAAAC,KAAAC,GAEAH,GACAC,EAAAC,KAAAF,GAGAI,MAAA/E,UAAAgF,OAAAC,MAAArB,EAAAgB,OAMA,MAAAhB,IAGAjB,OACAuC,OAEAnG,IAAA,SAAAoG,EAAAzD,GACA,GAAAiB,GAAAvD,EAAAuD,MAAAuC,GAEAvC,GAAAwC,GAAAxC,EAAAwC,OAEAxC,EAAAwC,GAAAN,KAAAnD,IAGAkB,IAAA,SAAAuC,EAAAzC,GACA,GAAA0C,GAAAhG,EAAAuD,MAAAuC,IAAAC,EAEA,IAAAC,GAAAA,EAAAjE,OAIA,IAAA,GAAAO,GAAAC,EAAA,EAAAD,EAAA0D,EAAAzD,MACAD,EAAAgB,MAMAlD,EAAAJ,EAAAI,MAAA,SAAAC,EAAAC,EAAAC,GACA8B,KAAAhC,KAAAA,EACAgC,KAAA/B,QAAAA,EACA+B,KAAA9B,MAAAA,EA6CA,IA1CAH,EAAA2D,UAAA,SAAArD,EAAAoC,EAAAC,GACA,GAAA,gBAAArC,GACA,MAAAA,EAGA,IAAA,kBAAAC,OAAAC,UAAAC,SAAAC,KAAAJ,GACA,MAAAA,GAAAF,IAAA,SAAAkC,GACA,MAAAtC,GAAA2D,UAAArB,EAAAI,EAAApC,KACAuF,KAAA,GAGA,IAAA3C,IACAjD,KAAAK,EAAAL,KACAC,QAAAF,EAAA2D,UAAArD,EAAAJ,QAAAwC,EAAAC,GACAmD,IAAA,OACAC,SAAA,QAAAzF,EAAAL,MACA+F,cACAtD,SAAAA,EACAC,OAAAA,EAOA,IAJA,WAAAO,EAAAjD,OACAiD,EAAA8C,WAAA,WAAA,QAGA1F,EAAAH,MAAA,CACA,GAAA8F,GAAA,UAAArG,EAAAC,KAAAI,KAAAK,EAAAH,OAAAG,EAAAH,OAAAG,EAAAH,MACAoF,OAAA/E,UAAA6E,KAAAI,MAAAvC,EAAA6C,QAAAE,GAGArG,EAAAuD,MAAAC,IAAA,OAAAF,EAEA,IAAA8C,GAAA,EAEA,KAAA,GAAAL,KAAAzC,GAAA8C,WACAA,GAAAL,EAAA,MAAAzC,EAAA8C,WAAAL,IAAA,IAAA,GAGA,OAAA,IAAAzC,EAAA4C,IAAA,WAAA5C,EAAA6C,QAAAF,KAAA,KAAA,KAAAG,EAAA,IAAA9C,EAAAhD,QAAA,KAAAgD,EAAA4C,IAAA,MAIAtG,KAAAN,SACA,MAAAM,MAAA0G,kBAKA1G,KAAA0G,iBAAA,UAAA,SAAAzC,GACA,GAAA0C,GAAAvC,KAAAC,MAAAJ,EAAAK,MACAnE,EAAAwG,EAAAzD,SACAM,EAAAmD,EAAAnD,IAEAxD,MAAAwE,YAAAJ,KAAAD,UAAA/D,EAAAC,KAAAC,OAAAF,EAAAuE,SAAAnB,EAAApD,EAAAoB,UAAArB,OACAH,KAAA4G,UACA,GAEA5G,KAAAE,OAZAF,KAAAE,KAgBA,IAAA2G,GAAAnH,SAAAoH,qBAAA,SAYA,OAVAD,GAAAA,EAAAA,EAAA1E,OAAA,GAEA0E,IACAzG,EAAA2D,SAAA8C,EAAAE,IAEArH,SAAAgH,mBAAAG,EAAAG,aAAA,gBACAtH,SAAAgH,iBAAA,mBAAAtG,EAAAwC,eAIA5C,KAAAE,QAIA,oBAAA+G,SAAAA,OAAAC,UACAD,OAAAC,QAAAhH,OAGAA,MAAAsB,UAAA2F,QACAC,QAAA,mBACAC,OAAA,YACAC,QAAA,gBACAC,MAAA,0BACAjB,KACArB,QAAA,kFACApD,QACAyE,KACArB,QAAA,gBACApD,QACA2F,YAAA,QACAC,UAAA,cAGAC,cACAzC,QAAA,mCACApD,QACA2F,YAAA,WAGAA,YAAA,QACAG,aACA1C,QAAA,WACApD,QACA4F,UAAA,gBAMAG,OAAA,uBAIA1H,MAAAyD,MAAA5D,IAAA,OAAA,SAAA2D,GAEA,WAAAA,EAAAjD,OACAiD,EAAA8C,WAAA,MAAA9C,EAAAhD,QAAAG,QAAA,QAAA,QAIAX,MAAAsB,UAAAqG,KACAT,QAAA,oBACAU,QACA7C,QAAA,4BACApD,QACA2F,YAAA,UAGAO,IAAA,wBACAC,SAAA,+BACAC,SAAA,0BACAC,OAAA,mBACAC,UAAA,mBACAX,YAAA,YACAY,WAAA,sBAGAlI,MAAAsB,UAAA2F,SACAjH,MAAAsB,UAAAI,aAAA,SAAA,OACAyG,OACApD,QAAA,qCACApD,QACAyE,KACArB,QAAA,8BACApD,OAAA3B,MAAAsB,UAAA2F,OAAAb,IAAAzE,QAEAgD,KAAA3E,MAAAsB,UAAAqG,KAEAlH,MAAA,kBAIAT,MAAAsB,UAAAI,aAAA,SAAA,cACA0G,cACArD,QAAA,wBACApD,QACA8F,aACA1C,QAAA,cACApD,OAAA3B,MAAAsB,UAAA2F,OAAAb,IAAAzE,QAEA2F,YAAA,wBACAE,cACAzC,QAAA,OACApD,OAAA3B,MAAAsB,UAAAqG,MAGAlH,MAAA,iBAEAT,MAAAsB,UAAA2F,OAAAb,MAEApG,MAAAsB,UAAAqG,IAAAG,UACA/C,QAAA,8BACApD,QACA0G,iBAAA,gEACAC,eAAA,sBACAC,QAAA,eACA/G,GAAA,gBAIAxB,MAAAsB,UAAAI,aAAA,MAAA,UACA8G,QAAA,kBACAd,OAAA,mBACAe,OAAA,cAEAzI,MAAAsB,UAAAoH,OACAxB,UAEAnC,QAAA,6BACAC,YAAA,IAGAD,QAAA,8BACAC,YAAA,IAGAgD,OAAA,mBACAW,cACA5D,QAAA,sGACAC,YAAA,EACArD,QACA2F,YAAA,YAGAsB,QAAA,4GACAC,UAAA,oBACAX,YACAnD,QAAA,iBACApD,QACA2F,YAAA,OAGAmB,OAAA,+CACAK,SAAA,6DACAC,OAAA,kBACAzB,YAAA,kBAGAtH,MAAAsB,UAAA0H,WAAAhJ,MAAAsB,UAAAC,OAAA,SACAqH,QAAA,iTACAH,OAAA,gEAGAzI,MAAAsB,UAAAI,aAAA,aAAA,WACAuH,OACAlE,QAAA,8EACAC,YAAA,KAIAhF,MAAAsB,UAAA2F,QACAjH,MAAAsB,UAAAI,aAAA,SAAA,OACAiF,QACA5B,QAAA,uCACApD,QACAyE,KACArB,QAAA,gCACApD,OAAA3B,MAAAsB,UAAA2F,OAAAb,IAAAzE,QAEAgD,KAAA3E,MAAAsB,UAAA0H,YAEAvI,MAAA,yBAKAT,MAAAsB,UAAA4H,KAAAlJ,MAAAsB,UAAAC,OAAA,SACA2F,SACAnC,QAAA,8BACAC,YAAA,GAEAgD,QAEAjD,QAAA,wBACApD,QAEAoG,SAAA,2CAGAa,QAAA,4HAGA5I,MAAAsB,UAAAI,aAAA,OAAA,WAEAqG,SAAA,0CAEA/H,MAAAsB,UAAAI,aAAA,OAAA,WAEAuG,UAAA,2CAGAjI,MAAAsB,UAAA6H,KAUAjC,QAAA,SAKAc,OAAA,oBAOAoB,SACArE,QAAA,iBACApD,QAOA0H,UAAA,iBAiBAC,MAAA,YAKAC,QAAA,cACAC,SAAA,gBAYAC,YAAA","file":"main.js","sourcesContent":["if('querySelector' in document && 'classList' in document.createElement('a') && 'addEventListener' in window) {\n\n  /* http://prismjs.com/download.html?themes=prism&languages=markup+css+css-extras+clike+javascript+bash+git */\n  self = (typeof window !== 'undefined')\n    ? window   // if in browser\n    : (\n      (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n      ? self // if in worker\n      : {}   // if in node js\n    );\n\n  /**\n  * Prism: Lightweight, robust, elegant syntax highlighting\n  * MIT license http://www.opensource.org/licenses/mit-license.php/\n  * @author Lea Verou http://lea.verou.me\n  */\n\n  var Prism = (function(){\n\n  // Private helper vars\n  var lang = /\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i;\n\n  var _ = self.Prism = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === 'Array') {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o) {\n        var type = _.util.type(o);\n\n        switch (type) {\n          case 'Object':\n            var clone = {};\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key]);\n              }\n            }\n\n            return clone;\n\n          case 'Array':\n            return o.slice();\n        }\n\n        return o;\n      }\n    },\n\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n      * Insert a token before another token in a language literal\n      * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n      * we cannot just provide an object, we need anobject and a key.\n      * @param inside The key (or language id) of the parent\n      * @param before The key to insert before. If not provided, the function appends instead.\n      * @param insert Object with the key/value pairs to insert\n      * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n      */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n\n          if (grammar.hasOwnProperty(token)) {\n\n            if (token == before) {\n\n              for (var newToken in insert) {\n\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        }\n\n        // Update references in other language definitions\n        _.languages.DFS(_.languages, function(key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n\n      // Traverse a language definition with Depth First Search\n      DFS: function(o, callback, type) {\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === 'Object') {\n              _.languages.DFS(o[i], callback);\n            }\n            else if (_.util.type(o[i]) === 'Array') {\n              _.languages.DFS(o[i], callback, i);\n            }\n          }\n        }\n      }\n    },\n\n    highlightAll: function(async, callback) {\n      var elements = document.querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code');\n\n      for (var i=0, element; element = elements[i++];) {\n        _.highlightElement(element, async === true, callback);\n      }\n    },\n\n    highlightElement: function(element, async, callback) {\n      // Find language\n      var language, grammar, parent = element;\n\n      while (parent && !lang.test(parent.className)) {\n        parent = parent.parentNode;\n      }\n\n      if (parent) {\n        language = (parent.className.match(lang) || [,''])[1];\n        grammar = _.languages[language];\n      }\n\n      if (!grammar) {\n        return;\n      }\n\n      // Set language on the element, if not present\n      element.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n      // Set language on the parent, for styling\n      parent = element.parentNode;\n\n      if (/pre/i.test(parent.nodeName)) {\n        parent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n      }\n\n      var code = element.textContent;\n\n      if(!code) {\n        return;\n      }\n\n      var env = {\n        element: element,\n        language: language,\n        grammar: grammar,\n        code: code\n      };\n\n      _.hooks.run('before-highlight', env);\n\n      if (async && self.Worker) {\n        var worker = new Worker(_.filename);\n\n        worker.onmessage = function(evt) {\n          env.highlightedCode = Token.stringify(JSON.parse(evt.data), language);\n\n          _.hooks.run('before-insert', env);\n\n          env.element.innerHTML = env.highlightedCode;\n\n          callback && callback.call(env.element);\n          _.hooks.run('after-highlight', env);\n        };\n\n        worker.postMessage(JSON.stringify({\n          language: env.language,\n          code: env.code\n        }));\n      }\n      else {\n        env.highlightedCode = _.highlight(env.code, env.grammar, env.language)\n\n        _.hooks.run('before-insert', env);\n\n        env.element.innerHTML = env.highlightedCode;\n\n        callback && callback.call(element);\n\n        _.hooks.run('after-highlight', env);\n      }\n    },\n\n    highlight: function (text, grammar, language) {\n      var tokens = _.tokenize(text, grammar);\n      return Token.stringify(_.util.encode(tokens), language);\n    },\n\n    tokenize: function(text, grammar, language) {\n      var Token = _.Token;\n\n      var strarr = [text];\n\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      tokenloop: for (var token in grammar) {\n        if(!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        var patterns = grammar[token];\n        patterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n            inside = pattern.inside,\n            lookbehind = !!pattern.lookbehind,\n            lookbehindLength = 0,\n            alias = pattern.alias;\n\n          pattern = pattern.pattern || pattern;\n\n          for (var i=0; i<strarr.length; i++) { // Don’t cache length as it changes during the loop\n\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              break tokenloop;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            pattern.lastIndex = 0;\n\n            var match = pattern.exec(str);\n\n            if (match) {\n              if(lookbehind) {\n                lookbehindLength = match[1].length;\n              }\n\n              var from = match.index - 1 + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                len = match.length,\n                to = from + len,\n                before = str.slice(0, from + 1),\n                after = str.slice(to + 1);\n\n              var args = [i, 1];\n\n              if (before) {\n                args.push(before);\n              }\n\n              var wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias);\n\n              args.push(wrapped);\n\n              if (after) {\n                args.push(after);\n              }\n\n              Array.prototype.splice.apply(strarr, args);\n            }\n          }\n        }\n      }\n\n      return strarr;\n    },\n\n    hooks: {\n      all: {},\n\n      add: function (name, callback) {\n        var hooks = _.hooks.all;\n\n        hooks[name] = hooks[name] || [];\n\n        hooks[name].push(callback);\n      },\n\n      run: function (name, env) {\n        var callbacks = _.hooks.all[name];\n\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n\n        for (var i=0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    }\n  };\n\n  var Token = _.Token = function(type, content, alias) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias;\n  };\n\n  Token.stringify = function(o, language, parent) {\n    if (typeof o == 'string') {\n      return o;\n    }\n\n    if (Object.prototype.toString.call(o) == '[object Array]') {\n      return o.map(function(element) {\n        return Token.stringify(element, language, o);\n      }).join('');\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (env.type == 'comment') {\n      env.attributes['spellcheck'] = 'true';\n    }\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    _.hooks.run('wrap', env);\n\n    var attributes = '';\n\n    for (var name in env.attributes) {\n      attributes += name + '=\"' + (env.attributes[name] || '') + '\"';\n    }\n\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\" ' + attributes + '>' + env.content + '</' + env.tag + '>';\n\n  };\n\n  if (!self.document) {\n    if (!self.addEventListener) {\n      // in Node.js\n      return self.Prism;\n    }\n    // In worker\n    self.addEventListener('message', function(evt) {\n      var message = JSON.parse(evt.data),\n          lang = message.language,\n          code = message.code;\n\n      self.postMessage(JSON.stringify(_.util.encode(_.tokenize(code, _.languages[lang]))));\n      self.close();\n    }, false);\n\n    return self.Prism;\n  }\n\n  // Get current script and highlight\n  var script = document.getElementsByTagName('script');\n\n  script = script[script.length - 1];\n\n  if (script) {\n    _.filename = script.src;\n\n    if (document.addEventListener && !script.hasAttribute('data-manual')) {\n      document.addEventListener('DOMContentLoaded', _.highlightAll);\n    }\n  }\n\n  return self.Prism;\n\n  })();\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Prism;\n  }\n  ;\n  Prism.languages.markup = {\n    'comment': /<!--[\\w\\W]*?-->/g,\n    'prolog': /<\\?.+?\\?>/,\n    'doctype': /<!DOCTYPE.+?>/,\n    'cdata': /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n    'tag': {\n      pattern: /<\\/?[\\w:-]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\/?>/gi,\n      inside: {\n        'tag': {\n          pattern: /^<\\/?[\\w:-]+/i,\n          inside: {\n            'punctuation': /^<\\/?/,\n            'namespace': /^[\\w-]+?:/\n          }\n        },\n        'attr-value': {\n          pattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n          inside: {\n            'punctuation': /=|>|\"/g\n          }\n        },\n        'punctuation': /\\/?>/g,\n        'attr-name': {\n          pattern: /[\\w:-]+/g,\n          inside: {\n            'namespace': /^[\\w-]+?:/\n          }\n        }\n\n      }\n    },\n    'entity': /\\&#?[\\da-z]{1,8};/gi\n  };\n\n  // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function(env) {\n\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.replace(/&amp;/, '&');\n    }\n  });\n  ;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\w\\W]*?\\*\\//g,\n    'atrule': {\n      pattern: /@[\\w-]+?.*?(;|(?=\\s*{))/gi,\n      inside: {\n        'punctuation': /[;:]/g\n      }\n    },\n    'url': /url\\(([\"']?).*?\\1\\)/gi,\n    'selector': /[^\\{\\}\\s][^\\{\\};]*(?=\\s*\\{)/g,\n    'property': /(\\b|\\B)[\\w-]+(?=\\s*:)/ig,\n    'string': /(\"|')(\\\\?.)*?\\1/g,\n    'important': /\\B!important\\b/gi,\n    'punctuation': /[\\{\\};:]/g,\n    'function': /[-a-z0-9]+(?=\\()/ig\n  };\n\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('markup', 'tag', {\n      'style': {\n        pattern: /<style[\\w\\W]*?>[\\w\\W]*?<\\/style>/ig,\n        inside: {\n          'tag': {\n            pattern: /<style[\\w\\W]*?>|<\\/style>/ig,\n            inside: Prism.languages.markup.tag.inside\n          },\n          rest: Prism.languages.css\n        },\n        alias: 'language-css'\n      }\n    });\n\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /\\s*style=(\"|').+?\\1/ig,\n        inside: {\n          'attr-name': {\n            pattern: /^\\s*style/ig,\n            inside: Prism.languages.markup.tag.inside\n          },\n          'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          'attr-value': {\n            pattern: /.+/gi,\n            inside: Prism.languages.css\n          }\n        },\n        alias: 'language-css'\n      }\n    }, Prism.languages.markup.tag);\n  };\n  Prism.languages.css.selector = {\n    pattern: /[^\\{\\}\\s][^\\{\\}]*(?=\\s*\\{)/g,\n    inside: {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/g,\n      'pseudo-class': /:[-\\w]+(?:\\(.*\\))?/g,\n      'class': /\\.[-:\\.\\w]+/g,\n      'id': /#[-:\\.\\w]+/g\n    }\n  };\n\n  Prism.languages.insertBefore('css', 'ignore', {\n    'hexcode': /#[\\da-f]{3,6}/gi,\n    'entity': /\\\\[\\da-f]{1,8}/gi,\n    'number': /[\\d%\\.]+/g\n  });;\n  Prism.languages.clike = {\n    'comment': [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//g,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*?(\\r?\\n|$)/g,\n        lookbehind: true\n      }\n    ],\n    'string': /(\"|')(\\\\?.)*?\\1/g,\n    'class-name': {\n      pattern: /((?:(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/ig,\n      lookbehind: true,\n      inside: {\n        punctuation: /(\\.|\\\\)/\n      }\n    },\n    'keyword': /\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/g,\n    'boolean': /\\b(true|false)\\b/g,\n    'function': {\n      pattern: /[a-z0-9_]+\\(/ig,\n      inside: {\n        punctuation: /\\(/\n      }\n    },\n    'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?)\\b/g,\n    'operator': /[-+]{1,2}|!|<=?|>=?|={1,3}|&{1,2}|\\|?\\||\\?|\\*|\\/|\\~|\\^|\\%/g,\n    'ignore': /&(lt|gt|amp);/gi,\n    'punctuation': /[{}[\\];(),.:]/g\n  };\n  ;\n  Prism.languages.javascript = Prism.languages.extend('clike', {\n    'keyword': /\\b(break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|get|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/g,\n    'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?|NaN|-?Infinity)\\b/g\n  });\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'regex': {\n      pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/g,\n      lookbehind: true\n    }\n  });\n\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('markup', 'tag', {\n      'script': {\n        pattern: /<script[\\w\\W]*?>[\\w\\W]*?<\\/script>/ig,\n        inside: {\n          'tag': {\n            pattern: /<script[\\w\\W]*?>|<\\/script>/ig,\n            inside: Prism.languages.markup.tag.inside\n          },\n          rest: Prism.languages.javascript\n        },\n        alias: 'language-javascript'\n      }\n    });\n  }\n  ;\n  Prism.languages.bash = Prism.languages.extend('clike', {\n    'comment': {\n      pattern: /(^|[^\"{\\\\])(#.*?(\\r?\\n|$))/g,\n      lookbehind: true\n    },\n    'string': {\n      //allow multiline string\n      pattern: /(\"|')(\\\\?[\\s\\S])*?\\1/g,\n      inside: {\n        //'property' class reused for bash variables\n        'property': /\\$([a-zA-Z0-9_#\\?\\-\\*!@]+|\\{[^\\}]+\\})/g\n      }\n    },\n    'keyword': /\\b(if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)\\b/g\n  });\n\n  Prism.languages.insertBefore('bash', 'keyword', {\n    //'property' class reused for bash variables\n    'property': /\\$([a-zA-Z0-9_#\\?\\-\\*!@]+|\\{[^}]+\\})/g\n  });\n  Prism.languages.insertBefore('bash', 'comment', {\n    //shebang must be before comment, 'important' class from css reused\n    'important': /(^#!\\s*\\/bin\\/bash)|(^#!\\s*\\/bin\\/sh)/g\n  });\n  ;\n  Prism.languages.git = {\n    /*\n    * A simple one line comment like in a git status command\n    * For instance:\n    * $ git status\n    * # On branch infinite-scroll\n    * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n    * # and have 1 and 2 different commits each, respectively.\n    * nothing to commit (working directory clean)\n    */\n    'comment': /^#.*$/m,\n\n    /*\n    * a string (double and simple quote)\n    */\n    'string': /(\"|')(\\\\?.)*?\\1/gm,\n\n    /*\n    * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n    * For instance:\n    * $ git add file.txt\n    */\n    'command': {\n      pattern: /^.*\\$ git .*$/m,\n      inside: {\n        /*\n        * A git command can contain a parameter starting by a single or a double dash followed by a string\n        * For instance:\n        * $ git diff --cached\n        * $ git log -p\n        */\n        'parameter': /\\s(--|-)\\w+/m\n      }\n    },\n\n    /*\n    * Coordinates displayed in a git diff command\n    * For instance:\n    * $ git diff\n    * diff --git file.txt file.txt\n    * index 6214953..1d54a52 100644\n    * --- file.txt\n    * +++ file.txt\n    * @@ -1 +1,2 @@\n    * -Here's my tetx file\n    * +Here's my text file\n    * +And this is the second line\n    */\n    'coord': /^@@.*@@$/m,\n\n    /*\n    * Regexp to match the changed lines in a git diff output. Check the example above.\n    */\n    'deleted': /^-(?!-).+$/m,\n    'inserted': /^\\+(?!\\+).+$/m,\n\n    /*\n    * Match a \"commit [SHA1]\" line in a git log output.\n    * For instance:\n    * $ git log\n    * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n    * Author: lgiraudel\n    * Date:   Mon Feb 17 11:18:34 2014 +0100\n    *\n    *     Add of a new line\n    */\n    'commit_sha1': /^commit \\w{40}$/m\n  };\n  ;\n}\n","/**\n * main.js\n *\n * Only runs in modern browsers via feature detection\n * Requires support for querySelector, classList and addEventListener\n */\n\nif('querySelector' in document && 'classList' in document.createElement('a') && 'addEventListener' in window) {\n\n  // Add class \"js\" to html element\n  document.querySelector('html').classList.add('js');\n\n}\n"],"sourceRoot":"/source/"}